#!/bin/sh
#install normal using openrc
#installation steps

#GLOBAL VARS - SET THESE ACCORDINGLY
HOSTNAME=myhostname
NUM_OF_CPU_CORE=1
USERNAME=user
URL="http://distfiles.gentoo.org/releases/amd64/autobuilds/current-install-amd64-minimal/stage3-amd64-20181004T214502Z.tar.xz"

#Set up partition - 1M = 2048sector
# sda1	2M		type 4 fat16				bios boot
# sda2	128M	type 83 linux 	bootable	boot
# sda3 	8G/12G	type 82						swap
# sda4	rest	type 83 linux				root
if [ ${1} -eq "1" ]; then
	parted -s /dev/sda mklabel gpt
	parted -s /dev/sda -a optimal mkpart primary 1Mib 3Mib name 1 grub set 1 bios_grub on
	parted -s /dev/sda -a optimal mkpart primary 3Mib 131Mib name 2 boot set 2 boot on
	parted -s /dev/sda -a optimal mkpart primary 131Mib 7761Mib name 3 swap
	parted -s /dev/sda -a optimal mkpart primary 7761Mib 100% name 4 rootfs

	#make file systems
	mkfs.vfat /dev/sda1
	mkfs.ext2 -j -T small /dev/sda2
	mkfs.ext4 /dev/sda4 
	mkswap /dev/sda3 

	#make mount points if not existing
	mkdir /mnt/gentoo

	#mount logical volumes and turn on swap
	mount /dev/sda4 /mnt/gentoo
	swapon /dev/sda3

	#WARNING, INSECURE IF ON UNKNOWN NETWORK
	ntpd -q -g
elif [ ${1} -eq "2" ]; then
	#using amd64:openrc
	cd /mnt/gentoo
	curl -L ${URL} > g.tar.bz2

	tar xpf g.tar.bz2 --xattrs-include='*.*' --numeric-owner

	#customize /mnt/gentoo/etc/portage/make.conf 
	sed -i -e '/^CFLAGS/c\CFLAGS="-march=native -O2"' /mnt/gentoo/etc/portage/make.conf
	echo MAKEOPTS='"'-j`(expr ${NUM_OF_CPU_CORE} + 1)`'"' >> /mnt/gentoo/etc/portage/make.conf

	#configure mirrors
	mirrorselect -i -o >> /mnt/gentoo/etc/portage/make.conf
	mkdir --parents /mnt/gentoo/etc/portage/repos.conf
	cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf

	cp --dereference /etc/resolv.conf /mnt/gentoo/etc/

	#mount
	mount --types proc /proc /mnt/gentoo/proc
	mount --rbind /sys /mnt/gentoo/sys 
	mount --make-rslave /mnt/gentoo/sys 
	mount --rbind /dev /mnt/gentoo/dev 
	mount --make-rslave /mnt/gentoo/dev 

	#chroot
	cp /root/${0} /mnt/gentoo
	chroot /mnt/gentoo /bin/bash 
elif [ ${1} -eq "3" ]; then
	source /etc/profile 
	export PS1="(chroot) ${PS1}"
	mount /dev/sda2 /boot

	emerge-webrsync

	#may take a couple hours to complete
	eselect profile set 1
	emerge --update --deep --newuse @world

	emerge sys-kernel/gentoo-sources
	
	#VITAL-----------------------------------------------------------------------
	#this is where need to set kernel flags for encryption
	#or do this after generating genkernel
	#https://wiki.gentoo.org/wiki/Dm-crypt#Configuring_fstab
	cd /usr/src/linux
	make menuconfig
	make
	make modules_install
	make install
	cd -

	ln -sf /proc/self/mounts /etc/mtab

	emerge --unmerge sys-kernel/genkernel
	emerge sys-kernel/genkernel-next

	#modify for /usr partition
	sed -i -e '/^#UDEV/c\UDEV="yes"' /etc/genkernel.conf

	####https://wisewords.neocities.org/technology/setup-gentoo-virtualbox.html
	## step 16 and 17
	#blkid
	#nano fstab

	ROOTUUID=`blkid|grep /dev/sda4|awk -F " " '{print($2)}'|awk -F \" '{print($2)}'`
	BOOTUUID=`blkid|grep /dev/sda2|awk -F " " '{print($2)}'|awk -F \" '{print($2)}'`
	SWAPUUID=`blkid|grep /dev/sda3|awk -F " " '{print($2)}'|awk -F \" '{print($2)}'`
	echo "UUID=${ROOTUUID} / ext4 noatime,rw 0 1" >> /etc/fstab
	echo "UUID=${BOOTUUID} /boot ext2 noauto,noatime 1 2" >> /etc/fstab
	echo "UUID=${SWAPUUID} none swap sw 0 0" >> /etc/fstab
	
	genkernel --install --no-ramdisk-modules initramfs 

	#make sure /etc/portage/make.conf has systemd use flag
	sed -i -e '/^USE/c\USE="bindist mmx sse sse2 systemd"' /etc/portage/make.conf
	echo 'VIDEO_CARDS="intel"' >> /etc/portage/make.conf
	echo 'INPUT_DEVICES="libinput keyboard mouse synaptics"' >> /etc/portage/make.conf

	emerge -avDN @world

	#grub2
	echo GRUB_PLATFORMS='"'pc'"' >> /etc/portage/make.conf
	emerge sys-boot/grub
	sed -i -e '/.*GRUB_CMDLINE_LINUX="init/c\GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"' /etc/default/grub
	sed -i -e '/.*GRUB_CMDLINE_LINUX_DEFAULT.*/c\GRUB_CMDLINE_LINUX_DEFAULT=""' /etc/default/grub
        
	grub-install /dev/sda
	grub-mkconfig -o /boot/grub/grub.cfg

	#user login 
	echo root password
	passwd
	useradd -mg users -G wheel,users,audio,lp,cdrom,portage -s /bin/bash $USERNAME
	echo $USERNAME password
	passwd $USERNAME

	#install sudo
	##app-admin/sudo ?
	emerge sudo

	###??? make menuconfig or try editting /etc/buildkernel.conf, then build kernel
	#### for device mapper support and crypto algoritmhms???

	#cleanup and shutdown
	exit
elif [ ${1} -eq "4" ]; then
	######
	cd
	umount -l /mnt/gentoo/dev{/shm,/pts,}
	umount -l /mnt/gentoo{/boot,/proc,}
	poweroff
elif [ ${1} -eq "5" ]; then
	#network

	#post customization as root
	echo "America/Los_Angeles">/etc/timezone
	emerge --config sys-libs/timezone-data

	#edit /etc/locale.gen for english
	sed -i -e '/^#en_US ISO-8859-1/c\en_US ISO-8859-1' /etc/locale.gen
	sed -i -e '/^#en_US.UTF-8 UTF-8/c\en_US.UTF-8 UTF-8' /etc/locale.gen
	locale-gen
	env-update && source /etc/profile

	#set hostname
	hostnamectl set-hostname "${HOSTNAME}"

	#x window
	emerge x11-base/xorg-server
	emerge x11-base/xorg-drivers
	env-update
	source /etc/profile
	emerge x11-apps/xinit


	##software##################
	#emerge app-editors/vim
	#untested
	USE="X gpm lua tcl terminal vim-pager" emerge app-editors/vim
	
	emerge app-portage/gentoolkit

	emerge net-wireless/wpa_supplicanta

	#untested
	rc-update add wpa_supplicant default
	/etc/init.d/wpa_supplicant start	

	#security
	#untested use flags
	USE="conntrack static-libs" net-firewall/iptables
fi

#if no internet, manual set
#https://wiki.gentoo.org/wiki/Handbook:X86/Installation/Networking#Using_ifconfig_and_route
#
#ifconfig enp3s0 {ip addr} broadcast {broadcast} netmask {netmask} up
#route add default gw {gateway} - if virtual machine, then 10.0.2.2 else your normal
#
#vm is gw 10.0.2.2, broadcast is 192.168.1.0 netmask 255.0.0.0
